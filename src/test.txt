멀티스레드를 사용할 때 가장 주의해야 할 점은, 같은 자원에 여러 스레드가 동시에 접근할 때 발생하는 동시성 문제이다.
참고로 여러 스레드가 접근하는 자원을 공유 자원이라 한다. 대표적인 공유 자원은 인스턴스의 필드. (멤버 변수)이다.

t1이 아직 잔액을 줄이지 못했기 때문에 t2는 검증ㅈ 로직에서 현재 잔액을 1000원으로 확인 하는 문제가 생겨버림.

이런 문제가 발생한 근본 원인은 여러 스레드가 함께 사용하는 공유 자원을 여러 단계로 나누어 사용하기 때문.
1. 검증 단계
2. 출금 단계

한 번에 하나의 스레드만 실행.

출금을 진행할 때 잔액을 검증하는 단계부터 잔액의 계산을 완료할 때 까지 잔액의 값은 중간에 변하면 안됨.

임계영역 크리티컬 섹션
-> 여러 스레드가 동시에 접근하면 데이터 불일치나 예쌍치 못한 동작이 발생할 수 있는 위험하고 또 중요한 코드 부분을 뜻함.
여러 스레드가 동시에 접근해서는 안 되는 공유 자원을 접근하거나 수정하는 부분을 의미함.



synchronized 분석.
모든 객체는 내부에 자신만의 락을 가지고 있음. 모니터 락 이라고도 부름. 객체 내부에 있고 우리가 확인하기는 어려움.
스레드가 synchronized 키워드가 있는 메서드에 진입하려면 반드시 해당 인스턴스의 락이 있어야 한다!

지역 변수는 절대로! 절대로 다른 스레드와 공유되지 않는다.
final 필드도 문제x
여러 스레드가 공유 자원에 접근하는 것 자체는 사실 문제가 되지 않는다. 진짜 문제는 공유 자원을 사용하는 중간에 다른 스레드가
공유 자원의 값을 변경해버리기 때문에 발생한다. 결국 변경이 문제가 되는 것이다.

여러 스레드가 접근 가능한 공유 자원이라도 그 값을 아무도 변경할 수 없다면 문제 되지 않는다. 이 경우 모든 스레드가 항상 같은 값을 읽기 때문이다.
필드에 final이 붙으면 어떤 스레드도 값을 변경할 수 없다. 따라서 멀티스레드 상황에 문제 업슨ㄴ 안전한 공유 자원이 된다.

지역 변수는 스택에 생기니 상관 없어.
