synchronized 단점
- 무한 대기 : Blocked 상태의 스레드는 락이 풀릴 때까지 무한 대기한다.
특정 시간까지만 대기하는 타임아웃x
중간에 인터럽트x
- 공정성 : 락이 돌아왔을 때 Blocked 상태의 여러 스레드 중에 어떤 스레드가 락을 획득할 지 알 수 없다.
최악의 경우 특정 스레드가 너무 오랜기간 락을 획득하지 못할 수 있다.
그래서 concurrent.Lock이 나왔다.

LockSupport.park()를 호출해서 스스로 대기 상태에 빠질수 있음. 하지만 대기 상태의
스레드는 자신의 코드를 실행할 수 없기 때문에, 따라서 외부 스레드의 도움을 받아야 깨어날 수 있다.
LockSupport.unpark(thread) 이런식으로


LockSupport.park() -> thread를 대기 상태로 만드는 코드. Waiting 상태.
parkNanos(nanos) : 스레드를 나노초 동안만 Timed_Waiting 상태로 변경함. 지정한 나노초가 지나면
Timed_Waiting 상태에서 빠져나와서 Runnable상태로 변경함.


Blocked vs Waiting
waiting 상태에 특정 시간까지만 대기하는 기능이 포함된 것이 Timed_Waiting이다.
인터럽트
Blocked 상태는 인터럽트가 걸려도 대기 상태를 빠져나오지 못한다. 여전히 Blocked 상태이다.
Waiting, Timed_Waiting 상태는 인터럽트가 걸리면 대기 상태를 빠져나온다. 그래서 Runnable 상태로 변한다.

Blocked 상태는 자바의 synchronized에서 락을 획득하기 위해 대기할 때 사용된다.
WAITING , TIMED_WAITING 상태는 스레드가 특정 조건이나 시간 동안 대기할 때 발생하는 상태이다.
WAITING 상태는 다양한 상황에서 사용된다. 예를 들어, Thread.join() , LockSupport.park() ,
Object.wait() 와 같은 메서드 호출 시 WAITING 상태가 된다.
TIMED_WAITING 상태는 Thread.sleep(ms), Object.wait(long timeout) ,
Thread.join(long millis) , LockSupport.parkNanos(ns) 등과 같은 시간 제한이 있는 대기 메서
드를 호출할 때 발생한다

BLOCKED , WAITING , TIMED_WAITING 상태 모두 스레드가 대기하며, 실행 스케줄링에 들어가지 않기 때문에,
CPU 입장에서 보면 실행하지 않는 비슷한 상태이다.
BLOCKED 상태는 synchronized 에서만 사용하는 특별한 대기 상태라고 이해하면 된다.
WAITING , TIMED_WAITING 상태는 범용적으로 활용할 수 있는 대기 상태라고 이해하면 된다.



Lock 인터페이스는 동시성 프로그래밍에서 쓰이는 안전한 임계 영역을 위한 락을 구현하는데 사용된다.
Lock 인터페이스는 다음과 같은 메서드를 제공한다. 대표적인 구현체로 ReentrantLock이 있다.

여기서 사용하는 락은 객체 내부에 있는 모니터 락이 아니다! Lock 인터페이스와 ReentrantLock이 제공하는 기능.
모니터 락과 Blocked 상태는 synchronized에서만 사용된다.

private final Lock lock = new ReentrantLock()을 사용하도록 선언.
synchronized(this) 대신에 lock.lock()을 사용해서 락을 건다.
lock() -> unlock() 까지는 안전한 임계 영역이 된다.
임계 영역이 끝나면 반드시! 락을 반납하여야 한다. 그렇지 않으면 대기하는 스레드가 락을 얻지 못한다.

따라서 lock.unlock()은 반드시 finally 블럭에 작성해야한다. 이렇게 하면 검증에 실패해서 중간에 return을 호출해도 중간에 예상치 못한 예외가 발생해도
lock.unlock()은 반드시 호출 되니깐.

ReenterantLock 내부에는 락과 락을 얻지 못해 대기하는 스레드를 관리하는 대기 큐가 존재함.
여기서 이야기하는 락은 객체 내부에 있는 모니터 락이 아님.


t2가 락을 획득하지 못하면 Waiting 상태가 되고, 대기 큐에서 관리된다.
LockSupport.park()가 내부에서 호출됨.
t1의 임계 영역을 수행하고 나면 lcok.unlock()을 호출함.
1. t1: 락을 반납한다.
2. t1: 대기 큐의 스레드를 하나 깨움. LockSupport.unpark(thread)가 내부에서 호출됨.
3. t2: Runnable 상태가 되면서 깨어난 스레드는 락 획득을 시도한다.
이때 락을 획득하면 lock.lock()을 빠져나오면서 대기 큐에서도 제거됨.





